{%- assign swatch_file_extension = 'png' -%}
{% assign packNum = "" %}
{%- capture size_chart_title -%}
  {{ 'products.general.size_chart' | t }} <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-size-chart" viewBox="0 0 64 64"><path d="M22.39 33.53c-7.46 0-13.5-3.9-13.5-8.72s6-8.72 13.5-8.72 13.5 3.9 13.5 8.72a12 12 0 0 1-.22 1.73"/><ellipse cx="22.39" cy="24.81" rx="3.28" ry="2.12"/><path d="M8.89 24.81V38.5c0 7.9 6.4 9.41 14.3 9.41h31.92V33.53H22.39m24.39 0v7.44m-8.13-7.44v7.44m-8.13-7.44v7.44m-8.13-7.44v7.44"/></svg>
{%- endcapture -%}

{%- liquid
  assign is_size = false
  assign size_trigger = 'products.general.size_trigger' | t | downcase
  assign downcased_option = option.name | downcase

  if downcased_option contains size_trigger
    assign is_size = true
  endif
-%}
{% if template.suffix == 'bundle' %}
<style>
@media only screen and (max-width:768px){
  .bundle-custom .label {
  flex-direction: column!important;
}

   .bundle-custom .label .line-item-property__field{
     width: 100%!important;
  }
}
  
</style>
  {% endif %}
<div class="variant-wrapper js optoin-{{ option.name }}" data-type="button">
  <label class="variant__label{% if option.name == 'Default' or option.name == 'Title' %} hidden-label{% endif %}{% unless variant_labels %} hidden-label{% endunless %} optoin-{{ option.name }}"
    for="ProductSelect-{{ section_id }}-{{ product.id }}-option-{{ forloop.index0 }}">
    {{ option.name }}
    {%- if connect_to_sizechart and is_size -%}
      <span class="variant__label-info">
        &mdash;
        {%- render
          'tool-tip-trigger-sizechart',
          title: size_chart_title,
          content: section.blocks[sizechart_index].settings.size_chart.content,
          context: 'size-chart',
          product: product
        -%}
      </span>
    {%- endif -%}
    {%- if is_color -%}
      <span class="variant__label-info">
        &mdash;
        <span
          data-variant-color-label
          data-index="{{ forloop.index0 }}"
          data-option-index="{{ color_option_index }}">
          {{ option.selected_value }}
        </span>
      </span>
    {%- endif -%}
  </label>
  {%- assign option_index = forloop.index -%}
  <fieldset class="variant-input-wrap no-auto-select"
    name="{{ option.name }}"
    data-index="option{{ option_index }}"
    data-handle="{{ option.name | handleize }}"
    id="ProductSelect-{{ section_id }}-{{ product.id }}-option-{{ forloop.index0 }}">
    <legend class="hide">{{ option.name }}</legend>
    {%- for value in option.values -%}
      {%- liquid
        assign product_available = true
        if product.options.size == 1
          assign product_available = product.variants[forloop.index0].available
        endif
      -%}
      <div
        class="variant-input"
        data-index="option{{ option_index }}"
        data-value="{{ value | escape }}">
        <input type="radio"
          form="{{ form_id }}"
          {% if option.selected_value == value %} checked="checked"{% endif %}
          value="{{ value | escape }}"
          data-index="option{{ option_index }}"
          name="{{ option.name }}"
          data-variant-input
          data-option-name="{{ option.name }}"
          value="{{ value | escape }}" 
          {% if value contains "Pack" %}data-qty="{{ value | replace: "Pack of ", "" }}"{% endif %} 
          class="{% unless product_available %} disabled{% endunless %}{% if is_color %} variant__input--color-swatch{% endif %}"
          {% if is_color %} data-color-name="{{ value | escape }}"{% endif %}
          {% if is_color %} data-color-index="{{ color_option_index }}"{% endif %}
          id="ProductSelect-{{ section_id }}-{{ product.id }}-option-{{ option.name | handleize }}-{{ value | url_encode }}">
        {%- if is_color -%}
          {%- liquid
            assign color_file_name = value | handle | append: '.' | append: swatch_file_extension
            assign color_image = color_file_name | file_img_url: '50x50' | prepend: 'https:' | split: '?' | first
            assign color_swatch_fallback = value | split: ' ' | last | handle
          -%}
          <label
            for="ProductSelect-{{ section_id }}-{{ product.id }}-option-{{ option.name | handleize }}-{{ value | url_encode }}"
            class="variant__button-label color-swatch color-swatch--{{ value | handle }}{% unless product_available %} disabled{% endunless %}"
            style="background-color: {{ color_swatch_fallback }};{% if images[color_file_name] != blank %}  background-image: url({{ color_image }});{% endif %}"
          >
            {{ value | escape }}
          </label>
          {% if value contains "Pack" %}
                    {% assign packNum = value | replace: "Pack of ", "" %}           
                  {% endif %}
        {%- else -%}
          <label
            for="ProductSelect-{{ section_id }}-{{ product.id }}-option-{{ option.name | handleize }}-{{ value | url_encode }}"
            class="variant__button-label{% unless product_available %} disabled{% endunless %}">{{ value | escape }}</label>
        {% if value contains "Pack" %}
                    {% assign packNum = value | replace: "Pack of ", "" %}           
                  {% endif %}
        {%- endif -%}
      </div>
    {%- endfor -%}
  </fieldset>
</div>

   <div class="bundle-custom">
   {%- for block in section.blocks -%}
        {%- case block.type -%}

                  {%- when 'table_input' -%}
                              
                             
                                {% assign pack_num = packNum | times: 1 %}
                    
                              {% assign metaobject = product.metafields.custom.design_collection_bundle_direct.value %}
                              
                                                <div class="form-inline" style="margin: 30px 0px 40px 0px;">
                                        
                                                  <div class="label " data-pack-tab="{{ pack_num }}"  style="display: flex; justify-content: flex-start; align-items: flex-start; margin-bottom:25px; gap:15px;flex-flow: wrap;">
                                        
                                                    {% for num in (1..pack_num) %}
                                                      <div id="color-select-{{ num }}" class="color-select-dropdwon line-item-property__field" style="width: 28%;">
                                                          <div id="color-{{ num }}" class="form-group inputs" style="width: -webkit-fill-available;">
                                                              <label class="label" for="pack-color-{{ num }}">Color {{ num }}</label>
                                                              <select class="form-control option-selector block-swatch__item" data-selector-type="dropdown" id="pack-color-{{ num }}" index="{{ num }}" name="properties[Pack-Product-{{ num }}]" form="{{ product_form_id }}">
                                                                  <option value="" selected="selected">PICK ANY</option>
                                                                  {% for product in metaobject.products %}
                                                                    {{ product.id }}
                                                                  <option value="{{ product.metafields.custom.colour | escape  }}-{{ product.id }}"
                                                                    data-handle="{{ product.handle }}"
                                                                    data-id="{{ product.id }}"
                                                                    >{{ product.metafields.custom.colour }}</option>
                                                                  {% endfor %}
                                                              </select>
                                                              
                                                              <!-- Custom Dropdown -->
                                                              <div class="custom-dropdown" >
                                                                  <span class="custom-dropdown-selected">
                                                                      <img src="#" alt="Selected Color" class="selected-image hidden"  class="type_icon inline-block w-8 h-8" height="50px"> <!-- Placeholder for the selected image -->
                                                                      <span class="text-container">PICK ANY</span>
                                                                  </span>
                                                                  <div class="custom-dropdown-list"> 
                                                                      {% for product in metaobject.products %}
                                                                          <div class="custom-dropdown-list-item {% unless product.has_only_default_variant %}{% for option in product.options_with_values %}{% if option.name == 'Size' %}{% for value in option.values %}{% endfor %}{% endif %}{% endfor %}{% endunless %} {% for variant in product.variants %}{{ variant.title | escape | replace: " ", "" }}-{{ variant.inventory_quantity | escape }} {% endfor %}" 
                                                                          data-handle="{{ product.handle }}"
                                                                            data-id="{{ product.id }}"
                                                                            data-prev="{{ product.featured_image | image_url: width: '800' }}"
                                                                        data-value="{{ product.metafields.custom.colour }}-{{ product.id }}">
                                                                              <img src="{{ product.featured_image | image_url: width: '50' }}" alt="{{ product.metafields.custom.colour }}" class="type_icon inline-block w-8 h-8" height="50px">{{ product.metafields.custom.colour | escape }}</div>
                                                                      {% endfor %}
                                                                  </div>
                                                              </div>
                                                          </div>
                                                      </div>
                                                    {% endfor %}
                                                              
                                                  </div>
                                                </div>
                    

                    
                    
                                          {%- comment -%}Custom Input{%- endcomment -%}

             {% endcase %}
{% endfor %}
</div>
{% if template.suffix == 'bundle' %}
<script>
  
document.addEventListener('DOMContentLoaded', function () {
         console.log("Document loaded.");
let selectedSize="";
         // Select and log size options
         const sizeOptions = document.querySelectorAll('.optoin-Size .variant-input .variant__button-label');
         console.log("Size options found:", sizeOptions.length);
         if (sizeOptions.length === 0) {
            console.error('No size option elements found.');
            return;
         }


 const preSelectedSizeInput = document.querySelector('.variant-input input[type="radio"][name="Size"][checked]');
    if (preSelectedSizeInput) {
        const preSelectedSizeLabel = document.querySelector(`label[for="${preSelectedSizeInput.id}"]`);
        if (preSelectedSizeLabel) {
            // Now, you can either directly use the pre-selected size value,
            // or simulate a click on the corresponding label if that triggers additional logic.
            preSelectedSizeLabel.click(); // This simulates the user clicking on the pre-selected size.
            
            // Alternatively, if clicking is not needed and you just need to process the selected size:
            const selectedSize = preSelectedSizeInput.value;
            console.log("Pre-selected size found:", selectedSize);
          sizeselectinventory(selectedSize);
            // Call any functions here that need to know the selected size
            // For example: showPackOptionsBasedOnSize(selectedSize);
        }
    }

  const preSelectedPackInput = document.querySelector('.variant-input input[type="radio"][name="Select Pack"][checked]');
    if (preSelectedPackInput) {
        const preSelectedPackLabel = document.querySelector(`label[for="${preSelectedPackInput.id}"]`);
        if (preSelectedPackLabel) {
            // Now, you can either directly use the pre-selected size value,
            // or simulate a click on the corresponding label if that triggers additional logic.
            preSelectedPackLabel.click(); // This simulates the user clicking on the pre-selected size.
            
            // Alternatively, if clicking is not needed and you just need to process the selected size:
            const selectedPack = preSelectedPackInput.value;
            console.log("Pre-selected size found:", selectedPack);
          updateDropdownVisibility();
            // Call any functions here that need to know the selected size
            // For example: showPackOptionsBasedOnPack(selectedPack);
        }
    }
  
         // Size selection event
         sizeOptions.forEach(function (sizeOption) {
            sizeOption.addEventListener('click', function () {
              selectedSize = this.innerText.trim();
               console.log("Size selected:", selectedSize);
              sizeselectinventory(selectedSize);

            });
         });



  function sizeselectinventory(selectedSize){
               document.querySelectorAll('.custom-dropdown-list-item').forEach(function (item) {
                  // Assume the item should not be displayed by default
                  let displayItem = false;

                  // Split the class string by spaces to get individual classes
                  const classes = item.className.split(/\s+/);

                  classes.forEach(function (className) {
                     console.log("classesName", className);
                     // Directly check if the class contains the selected size
                     if (className.includes(`${selectedSize}`)) {
                        // Extract the inventory number after the last hyphen
                        const inventory = parseInt(className.split('-').pop(), 10);
                        console.log("classes", 'yes');
                        console.log("inventory", inventory);
                        // If inventory is 5 or more, mark the item to be displayed
                        if (!isNaN(inventory) && inventory >= 5) {
                           displayItem = true;
                        }
                     }
                  });

                  // Set the display property based on the inventory check
                  item.style.display = displayItem ? '' : 'none';
               });
    
  }

  
       // Function to toggle dropdown from the selected area
    document.querySelectorAll('.custom-dropdown .custom-dropdown-selected').forEach(function(selected) {
        selected.addEventListener('click', function(event) {
            event.stopPropagation(); // Prevents the event from bubbling up to the document

            // Close all dropdowns before toggling the current one
            closeAllDropdowns();

            // Toggle the visibility of the current dropdown list
            let list = this.nextElementSibling; // Assumes the .custom-dropdown-list is immediately after the .custom-dropdown-selected
            if(list && list.classList.contains('custom-dropdown-list')) { // Safety check
                list.style.display = list.style.display === 'block' ? 'none' : 'block';
                console.log("Dropdown toggled from selected area.");
            }
        });
    });



         // Pack selection changes
         document.querySelectorAll('input[data-option-name="Select Pack"]').forEach(function (radio) {
            radio.addEventListener('change', function () {
               updateDropdownVisibility();
               console.log("Pack selection changed.");
            });
         });

         // Close dropdowns when clicking outside
         document.addEventListener('click', function () {
            closeAllDropdowns();
            console.log("Closed all dropdowns on outside click.");
         });


         // Item selection within dropdowns
         document.querySelectorAll('.custom-dropdown-list-item').forEach(function (item) {
            item.addEventListener('click', function () {
               const value = this.getAttribute('data-value');
               const parentDropdown = this.closest('.color-select-dropdwon');
               const prev = this.getAttribute('data-prev');
               const dropdownId = parentDropdown.id;
               console.log("Item clicked:", this.innerText);

               // Update select element and displayed value
               updateSelection(dropdownId, value, this.innerText, this.querySelector('img'), prev);
            });
         });


         function updateSelection(dropdownId, value, text, optionImage, prev) {
            let selectElement = document.querySelector(`#${dropdownId} select`);
            let selectedSpan = document.querySelector(`#${dropdownId} .custom-dropdown-selected`);


            selectElement.querySelectorAll('option').forEach(function (option) {
               option.removeAttribute('selected');
            });
            // Set the corresponding option in the select dropdown as selected
            var matchingOption = selectElement.querySelector('option[value="' + value + '"]');
            if (matchingOption) {
               matchingOption.setAttribute('selected', 'selected');
            }

            document.addEventListener('DOMContentLoaded', function () {


               selectElement.addEventListener('change', function () {
                  // Remove selected attribute from all options
                  this.querySelectorAll('option').forEach(function (option) {
                     option.removeAttribute('selected');
                  });

                  // Add selected attribute to the currently selected option
                  var selectedOption = this.options[this.selectedIndex];
                  selectedOption.setAttribute('selected', 'selected');
               });
            });

            updateDisplayedValue(selectedSpan, text, optionImage, prev);
            console.log("Selection updated for:", dropdownId);
         }

         function updateDisplayedValue(selectedSpan, text, optionImage, prev) {
            let textContainer = selectedSpan.querySelector('.text-container') || createTextContainer(selectedSpan);
            // Create a temporary element to leverage the browser's HTML parsing
            let tempDiv = document.createElement('div');
            // Assign the text, which may contain HTML such as <br>, to the innerHTML of the temp div
            tempDiv.innerHTML = text;

            // Use innerText to get the plain text version, effectively stripping out all HTML tags
            let sanitizedText = tempDiv.innerText;
            // Assign the sanitized text, free of HTML tags, to the textContainer
            textContainer.innerText = sanitizedText;
            if (optionImage) {
               let selectedImage = selectedSpan.querySelector('.selected-image');
               selectedImage.src = optionImage.src;
               selectedImage.classList.remove('hidden');
               console.log("Updated image source to:", optionImage.src);
            }

           // Select all matching elements
            let prevElements = document.querySelectorAll('.product-image-main img');
            if (prevElements) {
            // Iterate over each element and update its srcset attribute
            prevElements.forEach(element => {
                element.srcset = prev;
                console.log("Updated image source to:", prev);
            });
            }else{console.log("Updated image source Not Found");}
           
            closeAllDropdowns(); // Close dropdown after selection
         }

         function createTextContainer(selectedSpan) {
            let container = document.createElement('span');
            container.className = 'text-container';
            selectedSpan.appendChild(container);
            return container;
         }

function updateDropdownVisibility() {
    let selectedPackQty = document.querySelector('input[data-option-name="Select Pack"]:checked')?.getAttribute('data-qty');
    console.log("Selected Pack Qty:", selectedPackQty);

    selectedPackQty = parseInt(selectedPackQty, 10);

    document.querySelectorAll('.color-select-dropdwon').forEach(function (dropdown, index) {
        console.log(`Dropdown #${index + 1} Display:`, index < selectedPackQty ? 'flex' : 'none');
        if (index < selectedPackQty) {
            dropdown.style.display = 'flex';
            dropdown.classList.add("show"); // Only add "show" to visible dropdowns
        } else {
            dropdown.style.display = 'none';
            dropdown.classList.remove("show"); // Remove "show" from hidden dropdowns for clarity
        }
    });
}


         // Utility functions
         function closeAllDropdowns() {
            document.querySelectorAll('.custom-dropdown-list').forEach(list => list.style.display = 'none');
         }


  
  
 const addToCartButton = document.getElementById('add-to-cart');
    if (addToCartButton) {
        addToCartButton.addEventListener('click', async function () {
            let productsToAdd = [];

            const dropdowns = document.querySelectorAll('.bundle-custom .show select');
            for (const selectElement of dropdowns) {
                const selectedOption = selectElement.options[selectElement.selectedIndex];
                const handle = selectedOption.getAttribute('data-handle');
                // Assuming size needs to be fetched uniquely for each product
                const size = document.querySelector('.optoin-Size .variant-input input:checked').value; // Adjust this if size is handled differently

                if (handle && size) {
                    try {
                        const variantId = await fetchProductVariantIdByHandle(handle, size);
                        if (variantId) {
                            productsToAdd.push({
                                id: variantId,
                                quantity: 1,
                                properties: { 'Item Type': 'Pack' }
                            });
                        }
                    } catch (error) {
                        console.error("Error fetching variant ID for handle:", handle, "size:", size, error);
                    }
                }
            }

            if (productsToAdd.length > 0) {
                try {
                    await addProductsToCart(productsToAdd);
                    console.log("All selected products added to cart.");
                   updateCartUI();
                } catch (error) {
                    console.error("Error adding products to cart:", error);
                }
            } else {
                console.error('No products selected or missing product details.');
            }
        });
    } else {
        console.error('Add to Cart button not found.');
    }


async function addProductsToCart(products) {
    let formData = { 'items': products };
    
    try {
        const response = await fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        const cartResponse = await response.json();
        console.log("Products added to cart", cartResponse);
    } catch (error) {
        console.error("Error adding items to cart:", error);
    }
}



         function fetchProductVariantIdByHandle(handle, size) {
            var url = "/products/" + handle + ".json";
            console.log("fetch:", size);
            return fetch(url)
               .then(function (response) {
                  if (response.ok) {
                     return response.json();
                  } else {
                     throw new Error("Error fetching product by handle: " + handle);
                  }
               })
               .then(function (data) {
                  var variants = data.product.variants;
                  var matchingVariant = variants.find(function (variant) {
                     return variant.title === size;
                  });
                 console.log("VariantData:", variants);

                  var variantId = matchingVariant ? matchingVariant.id : null;

                  console.log("Product Handle:", handle);
                  console.log("Size:", size);
                  console.log("Variant ID:", variantId);

                  return variantId;
               });
         }


  function updateCartUI() {
    theme.cart.getCart().then(cart => {
        console.log('Updated cart:', cart);
        // window.location.href = '/cart';
      document.dispatchEvent(new CustomEvent('ajaxProduct:added'));
    }).catch(error => {
        console.error('Failed to update cart UI:', error);
    });
}



                     });
</script>
{% endif %}